package org.csc133.a1;

import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.Font;
import com.codename1.ui.Graphics;
import com.codename1.ui.geom.Point;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;

import java.awt.*;
import java.util.ArrayList;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {
    @Override
    public void runApp() {
        new Game().show();
    }
}

// -----------------------------------------------------------------------
// Initializes game world. Tells Form and game world to draw themselves.
// Source of graphics context each object uses to draw.
//
class Game extends Form implements Runnable{
    private GameWorld gw;

    public Game(){
        super.getToolbar().hideToolbar();
        gw = new GameWorld();
    }

    @Override
    public void paint(Graphics g){
        g.setColor(ColorUtil.BLACK);
        g.fillRect(0,0, Display.getInstance().getDisplayWidth(), Display.getInstance().getDisplayHeight());
        super.paint(g);
        gw.draw(g);
    }

    @Override
    public void run() {
        // calls methods in GameWorld class
    }
}

// -----------------------------------------------------------------------
// Holds state of game, determines win/lose conditions, instantiates and
// links other Game objects
//
class GameWorld{
    River river;
    Helipad helipad;
    Helicopter helicopter;
    Fire testF;
    // ArrayList<Fire> fires;

    public GameWorld(){
        init();
    }

    void init(){
        river = new River();
        helipad = new Helipad();
        helicopter = new Helicopter();
        testF = new Fire();
        // fires = new ArrayList<>();      // EDIT
    }

    void draw(Graphics g){
        river.draw(g);
        helipad.draw(g);
        helicopter.draw(g);
        testF.draw(g);
    }
}

// -----------------------------------------------------------------------
//
class River{
    Point location;
    int width;
    int height;
    // will need bounding box coords (new class?)

    public River(){
        width = Display.getInstance().getDisplayWidth();
        height = Display.getInstance().getDisplayHeight()/10;
        location = new Point(0, Display.getInstance().getDisplayHeight()/5);
    }

    void draw(Graphics g){
        g.setColor(ColorUtil.BLUE);
        g.drawLine( location.getX(), location.getY(),
                location.getX()+width, location.getY());
        g.drawLine( location.getX(), location.getY()+height,
                location.getX()+width, location.getY()+height);
    }
}

// -----------------------------------------------------------------------
//
class Fire{
    Point location;
    int size;

    public Fire(){
        // default size and location
        //
        size = 200;
        location = new Point(500, 500);
    }

    void draw(Graphics g){
        Font f = new Font();
        g.setColor(ColorUtil.MAGENTA);

        g.fillArc(location.getX(), location.getY(), size, size, 0, 360);
        g.drawString(Integer.toString(size), location.getX()+size, location.getY()+size);
    }
}

// -----------------------------------------------------------------------
//
class Helipad{
    Point location;
    int sSize, cSize;
    int cOffset;
    int displayWidth, displayHeight;

    public Helipad(){

        // get current screen width and height
        //
        displayWidth = Display.getInstance().getDisplayWidth();
        displayHeight = Display.getInstance().getDisplayHeight();

        // set up square and concentric circle based on display dimensions
        //
        sSize = displayHeight/8;
        cOffset = 40;
        cSize = sSize-cOffset;

        // located at half the screen width and its width above the bottom
        //
        location = new Point(displayWidth/2 - sSize/2, displayHeight - (int)(sSize*2));
    }

    void draw(Graphics g) {
        g.setColor(ColorUtil.GRAY);
        g.drawRect(location.getX(), location.getY(), sSize, sSize, 5);
        g.drawArc(location.getX() + cOffset/2, location.getY() + cOffset/2,
                   cSize, cSize, 0, 360);
    }
}

// -----------------------------------------------------------------------
//
class Helicopter{
    Point location;
    Point center;
    int size;
    int displayWidth, displayHeight;

    public Helicopter(){

        // get current screen width and height
        //
        displayWidth = Display.getInstance().getDisplayWidth();
        displayHeight = Display.getInstance().getDisplayHeight();

        // set up size and location based on display dimensions
        //
        size = displayHeight/40;

        location = new Point(displayWidth/2 - size/2, displayHeight - size*7);
        center = new Point(location.getX() + size/2, location.getY() + size/2);
    }

    void draw(Graphics g){
        g.setColor(ColorUtil.YELLOW);
        g.fillArc(location.getX(), location.getY(), size, size, 0, 360);
        g.drawLine(center.getX(), center.getY(), center.getX(), center.getY() - size*2);   // CHANGES W DIRECTION
    }
}
